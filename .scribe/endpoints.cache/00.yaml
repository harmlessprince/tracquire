## Autogenerated by Scribe. DO NOT MODIFY.

name: Authentication
description: |-

  API endpoints for managing authentication
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      title: 'Log in the user.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The user email address.'
        required: true
        example: sapiente
        type: string
        custom: []
      password:
        name: password
        description: 'The the user new password.'
        required: true
        example: dignissimos
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "data": {
           "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiO............."
           "user": {
           "id": 4,
          "first_name": "John",
          "last_name": "Doe",
          "username": "amara.kutch",
          "phone": "09012341234",
          "email": "john@example.com",
          "user_type": 1,
          "email_verified_at": "2022-01-09T08:51:19.000000Z",
          "device_name": "postman",
          "status": 0,
          "ip": "172.02.190",
          "latitude": "12.10000000",
          "longitude": "23.33000000",
          "country": "Nigeria",
          "state": "Lagos",
          "city": "ikeja",
          "deleted_at": null,
          "created_at": "2022-01-09T08:51:20.000000Z",
          "updated_at": "2022-01-09T08:51:20.000000Z"
            }
          },
          "message": "Logged in successfully!"
          }
        headers: []
        description: '200'
      -
        status: 401
        content: '{ "status": "error",  "data": [],  "message": "invalid email or password",  "code": 401}'
        headers: []
        description: '401, Invalid Credential'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      title: 'Register user.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      referrer:
        name: referrer
        description: 'The token sent to the user.'
        required: true
        example: qui
        type: string
        custom: []
      email:
        name: email
        description: 'The the user email,this is a unique field.'
        required: true
        example: sed
        type: string
        custom: []
      password:
        name: password
        description: 'The user password.'
        required: true
        example: blanditiis
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {"status":"success",
          "data":{
           "user":{
               "email":"admuin1@dev.com",
               "device_name":"PostmanRuntime/7.26.8",
               "status":2,
               "updated_at":"2022-01-09T21:18:14.000000Z",
               "created_at":"2022-01-09T21:18:14.000000Z",
               "id":5,
               "email_verified_at":"2022-01-09T21:18:14.000000Z"
          },
           "token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ...."},
           "message":"Registration successful!"
          },
        headers: []
        description: '200'
      -
        status: 422
        content: |-
          {"status":"error",
          "data":{
          "errors":{
           "email":["The email has already been taken."]
          }
          },
           "message":"The given data failed to pass validation.",
           "code":9
          }
        headers: []
        description: '422, Email Exist'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/auth/user
    metadata:
      title: 'Get authenticated user profile'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"status":"error","data":[],"message":"Unauthenticated.","code":10}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '://barter.test:'
          access-control-allow-credentials: 'true'
          access-control-allow-methods: 'POST, GET, OPTIONS, PUT, DELETE, PATCH'
          access-control-allow-headers: 'X-Requested-With, Content-Type, Origin, Authorization'
        description: null
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/auth/logout
    metadata:
      title: 'Log user out of the app'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 401
        content: '{"status":"error","data":[],"message":"Unauthenticated.","code":10}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '://barter.test:'
          access-control-allow-credentials: 'true'
          access-control-allow-methods: 'POST, GET, OPTIONS, PUT, DELETE, PATCH'
          access-control-allow-headers: 'X-Requested-With, Content-Type, Origin, Authorization'
        description: null
    responseFields: []
